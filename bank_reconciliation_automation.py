# -*- coding: utf-8 -*-
"""Bank_Reconciliation_Automation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C-vhRb6lHtmOa824kbeAuI5WQxJ29ctg
"""

# Commented out IPython magic to ensure Python compatibility.
# #@title Driver Installation 
# 
# %%sh
# curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
# curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list
# sudo apt-get update
# sudo ACCEPT_EULA=Y apt-get -q -y install msodbcsql17

!pip install pyodbc

#@title Database Details

import os
import pyodbc 
import pandas as pd
import numpy as np
# from dotenv import load_dotenv

# load_dotenv()

server = 's14.winhost.com'
# database = os.getenv('DB_NAME')
username = 'DB_114226_vsdsandbox_user'
password = 'Ardm0r3@IL'

def create_db_connection(server,username, password):
    connection = None
    try:
        connection = pyodbc.connect(
            'DRIVER={ODBC Driver 17 for SQL Server};\
            SERVER='+server+';\
            UID='+username+';\
            PWD='+ password
        )
        print("Database connection successful")
    except Error as err:
        print(f"Error: '{err}'")

    return connection

conn = create_db_connection(server,username,password)
print(conn)

def read_db_table(dbname, **kwargs):
  dfs = []
  for key in tables.keys():

    df = pd.read_sql_query(
      'SELECT * FROM ['+ dbname +'].[dbo].['+ tables[key] +']', conn)
    dfs.append(df)

  return dfs

def exact_matching_logic(read_db_table, dbname, **kwargs):

  table_1, table_2 = read_db_table(dbname, **kwargs)
  # table_1_columns = table_1.columns
  # table_2_columns = table_2.columns

  # df = pd.concat([result_table_1, result_table_2], axis = 1)
  # table_1 = df[table_1_columns]
  # table_2 = df[table_2_columns]


  table_1['Transaction_Short_Text'] = table_1['Transaction_Short_Text'].str.lower()
  table_2['Short_Text'] = table_2['Short_Text'].str.lower()


  count = 0
  for x, y in zip(table_1.index, table_1[['Transaction_Amount', 
                                          "Transaction_Short_Text"]].values):
    matching_logic = (table_2['Short_Text'] == y[1])&(table_2['Transaction_Amount'] == y[0])
    table_1.loc[matching_logic,"Matching_Engine_Key"] = 1000001 + count
    table_2.loc[matching_logic, 
                ['Matching_Confidence_Level',
                "Matching_Status",
                "Matching_Comments",
                "Matching_Engine_Key"]] = (0.95, "Exact Match",
                                            "Short Text and Transaction Value Matched",
                                            1000001 + count)
    count += 1
  return table_1, table_2

tables = {
   "first_table" :"Bank_Ledger_Transactions",
   "second_table": "bank_statement_activity"
   }
result_table_1, result_table_2 = exact_matching_logic(read_db_table,
                                                      "DB_114226_vsdsandbox",
                                                      **tables)

tables = {
   "first_table" :"Bank_Ledger_Transactions",
   "second_table": "bank_statement_activity"
   }

table_1, table_2 = read_db_table("DB_114226_vsdsandbox", **tables)

table_1_columns = table_1.columns
table_1_columns_x = []
for column in table_1_columns:
  table_1_columns_x.append(column + "_x")

table_2_columns = table_2.columns
table_2_columns_y = []
for column in table_2_columns:
  table_2_columns_y.append(column + "_y")

# print(table_1_columns_x)
# print(table_2_columns_y)

table_1.rename(columns=dict(zip(table_1_columns, table_1_columns_x)), inplace=True)
table_2.rename(columns=dict(zip(table_2_columns, table_2_columns_y)), inplace=True)

df = pd.concat([table_1, table_2], axis = 1)
table_1 = df[table_1_columns_x]
table_2 = df[table_2_columns_y]

table_1['Transaction_Short_Text_x'] = table_1['Transaction_Short_Text_x'].str.lower()
table_2['Short_Text_y'] = table_2['Short_Text_y'].str.lower()

# import fuzzymatcher

# left_on = ['Transaction_Short_Text_x']

# right_on = ['Short_Text_y']

# table_1.rename_axis('id', inplace=True)
# table_2.rename_axis('idy', inplace=True)

# table_2.head(1)

# matched_results = fuzzymatcher.fuzzy_left_join(table_1,
#                                             table_2,
#                                             left_on,
#                                             right_on,
#                                             left_id_col='id',
#                                             right_id_col='idx')

# from fuzzywuzzy import fuzz
# from fuzzywuzzy import process

def all_table_matches():
    pass

def at_least_three_matching_values():
    pass

def not_at_least_three_matching_values():
    pass